// Auto-generated from fbreporter.html.
// DO NOT EDIT.

library fbreporter;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'pageitem.dart';
import 'post_interaction.dart';
import 'postlistitem.dart';
import 'post_details.dart';
import '_from_packages/widget/components/modal.dart';
import 'dart:html';
import 'dart:async';
import 'dart:collection';
import "dart:json" as JSON;
import 'dart:math' as Math;
import 'package:intl/intl.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:web_ui/web_ui.dart';
import 'package:google_drive_v2_api/drive_v2_api_browser.dart' as drivelib;
import 'package:google_oauth2_client/google_oauth2_browser.dart';
import 'package:js/js.dart' as js;
import 'package:web_ui/watcher.dart' as watchers;
part '../facebook.dart';
part '../drive.dart';
part 'store.dart';
part '../drive_picker.dart';
part '../spreadsheets.dart';
part '../toster.dart';


// Original code


final CLIENT_ID = "933209257700.apps.googleusercontent.com";
final SCOPES = [drivelib.Drive.DRIVE_FILE_SCOPE,drivelib.Drive.DRIVE_SCOPE, 'https://spreadsheets.google.com/feeds','https://docs.google.com/feeds', 'https://www.googleapis.com/auth/userinfo.profile'];
final FB_SCOPES = ['manage_pages','read_insights'];

var fbi;
String get selectedPageClass => fbi.selectedPage == null ? '' : 'selectedPage';
String get selectedPostClass => fbi.selectedPost == null ? '' : 'selectedPost';
String get postsListClass => fbi.selectedPost == null ? 'span9' : 'span3';
String get chooserClass => fbi.selectedPage == null ? 'span12' : fbi.selectedPost == null ? 'span3':'span0';

void main() {
  initializeDateFormatting(window.navigator.language, null).then((_){});
  fbi = new FacebookInsights();
}



class FacebookInsights extends Observable  {
  GoogleOAuth2 auth;
  
  Token __$google_auth_token;
  Token get google_auth_token {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'google_auth_token');
    }
    return __$google_auth_token;
  }
  set google_auth_token(Token value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'google_auth_token',
          __$google_auth_token, value);
    }
    __$google_auth_token = value;
  }
  FacebookAuth __$fbauth;
  FacebookAuth get fbauth {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'fbauth');
    }
    return __$fbauth;
  }
  set fbauth(FacebookAuth value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'fbauth',
          __$fbauth, value);
    }
    __$fbauth = value;
  }
  bool __$pagesListLoading = false;
  bool get pagesListLoading {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'pagesListLoading');
    }
    return __$pagesListLoading;
  }
  set pagesListLoading(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'pagesListLoading',
          __$pagesListLoading, value);
    }
    __$pagesListLoading = value;
  }
  bool __$pagePostListLoading = false;
  bool get pagePostListLoading {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'pagePostListLoading');
    }
    return __$pagePostListLoading;
  }
  set pagePostListLoading(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'pagePostListLoading',
          __$pagePostListLoading, value);
    }
    __$pagePostListLoading = value;
  }
  bool __$spreadsheetUpdating = false;
  bool get spreadsheetUpdating {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'spreadsheetUpdating');
    }
    return __$spreadsheetUpdating;
  }
  set spreadsheetUpdating(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'spreadsheetUpdating',
          __$spreadsheetUpdating, value);
    }
    __$spreadsheetUpdating = value;
  }
  bool __$pagePostInsightLoading = false;
  bool get pagePostInsightLoading {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'pagePostInsightLoading');
    }
    return __$pagePostInsightLoading;
  }
  set pagePostInsightLoading(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'pagePostInsightLoading',
          __$pagePostInsightLoading, value);
    }
    __$pagePostInsightLoading = value;
  }
  List<FacebookPage> __$pagesList = toObservable([]);
  List<FacebookPage> get pagesList {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'pagesList');
    }
    return __$pagesList;
  }
  set pagesList(List<FacebookPage> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'pagesList',
          __$pagesList, value);
    }
    __$pagesList = value;
  }
  List __$pagePostList = toObservable([]);
  List get pagePostList {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'pagePostList');
    }
    return __$pagePostList;
  }
  set pagePostList(List value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'pagePostList',
          __$pagePostList, value);
    }
    __$pagePostList = value;
  }
  bool get loading => pagesListLoading || pagePostListLoading || spreadsheetUpdating || pagePostInsightLoading;
  
  String __$nextPagePostToken;
  String get nextPagePostToken {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'nextPagePostToken');
    }
    return __$nextPagePostToken;
  }
  set nextPagePostToken(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'nextPagePostToken',
          __$nextPagePostToken, value);
    }
    __$nextPagePostToken = value;
  }
  
  bool get isFacebookConnected => fbauth != null && fbauth.accessToken != '';
  bool get isGoogleConnected => google_auth_token != null;
  bool get isNextPagePostToken => nextPagePostToken != null;
  String __$selectedPage;
  String get selectedPage {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'selectedPage');
    }
    return __$selectedPage;
  }
  set selectedPage(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'selectedPage',
          __$selectedPage, value);
    }
    __$selectedPage = value;
  }
  String __$selectedPost;
  String get selectedPost {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'selectedPost');
    }
    return __$selectedPost;
  }
  set selectedPost(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'selectedPost',
          __$selectedPost, value);
    }
    __$selectedPost = value;
  }
  
  HashMap<String, FacebookPageConfig> __$facebookPagesConfig = new HashMap();
  HashMap<String, FacebookPageConfig> get facebookPagesConfig {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'facebookPagesConfig');
    }
    return __$facebookPagesConfig;
  }
  set facebookPagesConfig(HashMap<String, FacebookPageConfig> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'facebookPagesConfig',
          __$facebookPagesConfig, value);
    }
    __$facebookPagesConfig = value;
  }
  /// Get (if present) currently selected page config.
  @observable FacebookPageConfig get currentPageConfig => facebookPagesConfig.containsKey(selectedPage) ? facebookPagesConfig[selectedPage] : null;
  
  Map __$spreadsheetSheetsList = toObservable(new Map());
  Map get spreadsheetSheetsList {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'spreadsheetSheetsList');
    }
    return __$spreadsheetSheetsList;
  }
  set spreadsheetSheetsList(Map value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'spreadsheetSheetsList',
          __$spreadsheetSheetsList, value);
    }
    __$spreadsheetSheetsList = value;
  }
  bool __$spreadsheetSheetsListLoading = false;
  bool get spreadsheetSheetsListLoading {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'spreadsheetSheetsListLoading');
    }
    return __$spreadsheetSheetsListLoading;
  }
  set spreadsheetSheetsListLoading(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'spreadsheetSheetsListLoading',
          __$spreadsheetSheetsListLoading, value);
    }
    __$spreadsheetSheetsListLoading = value;
  }
  PostsSelectionController __$postsSelectionController = new PostsSelectionController();
  PostsSelectionController get postsSelectionController {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'postsSelectionController');
    }
    return __$postsSelectionController;
  }
  set postsSelectionController(PostsSelectionController value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'postsSelectionController',
          __$postsSelectionController, value);
    }
    __$postsSelectionController = value;
  }
  List __$pagePostInsights;
  List get pagePostInsights {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'pagePostInsights');
    }
    return __$pagePostInsights;
  }
  set pagePostInsights(List value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'pagePostInsights',
          __$pagePostInsights, value);
    }
    __$pagePostInsights = value;
  }
  
  FacebookInsights(){
    auth = new GoogleOAuth2(CLIENT_ID, SCOPES);
    auth.login(immediate: true).then(handleGoogleToken);
    setUpFacebook();
    
  }
  
  void googleLogin(){
    auth.login().then(handleGoogleToken);
  }
  
  void googleLogout(){
    auth.logout();
    google_auth_token = null;
  }
  
  void facebookLogin(){
    FB.login(FB_SCOPES).then(_handleFacebookLogin).catchError((var error){
      //TODO: error catch
    });
  }
  
  void _handleFacebookLogin(var response){
    fbauth = response;
    if(fbauth != null && fbauth.accessToken != null){
      getUserFacebookPages();
    }
  }
  
  void handleGoogleToken(var token){
    auth.token = token;
    google_auth_token = token;
    
    
    //load pages config from Config Spreadsheet
    AppStore store = new AppStore();
    store.loadPagesConfig()
    .then((HashMap<String, FacebookPageConfig> config){
      if(config == null) config = new HashMap();
      facebookPagesConfig = config;
    });
  }
  
  void setUpFacebook(){
    js.context.onFacebookReady = new js.Callback.once(onFacebookReady);
    var script = new ScriptElement();
    script.src = '//connect.facebook.net/en_US/all.js';
    document.body.nodes.add(script);
  }
  
  void onFacebookReady(){
    FB.getLoginStatus().then(_handleFacebookLogin).catchError((var error){
      //TODO: error catch
    });
  }
  
  void selectPage(var pageId){
    selectedPage = pageId;
    
    Element el = query("#PageChooser *[data-selected-page=true]");
    if(el != null){
      el.attributes.remove('data-selected-page');
    }
    
    el = query('#PageChooser *[data-pageid="'+pageId+'"]');
    if(el != null){
      el.attributes.putIfAbsent('data-selected-page', (){ return 'true'; });
    }
    
    nextPagePostToken = null;
    pagePostList.clear();
    Element target = query('#SelectAllPostsToggle');
    if(target != null) {
      target.dataset.remove('state');
    }
    getPagePosts();
  }
  
  
  void loadNextPostsPage(Event e){
    e.preventDefault();
    getPagePosts();
  }
  
  void getPagePosts(){
    pagePostListLoading = true;
    var path = '';
    if(nextPagePostToken == null || nextPagePostToken.isEmpty){
      path = '/$selectedPage/posts?fields=id,message,story,created_time,picture,type,status_type';
    } else {
      path = nextPagePostToken;
    }
    
    FB.api(path).then((js.Proxy resp){
      pagePostListLoading = false;
      
      if(resp == null) {nextPagePostToken = null; return;}
      if(resp.data == null || resp.data.length == 0) {nextPagePostToken = null; return;}
      var len = resp.data.length;
      
      for(int i=0; i<len; i++){
        var p = resp.data[i];
        
        if(p['status_type'] == null){
          continue;
        }
        if(p['created_time'] != null){
          
          DateTime d = DateTime.parse(p['created_time']);
          DateFormat df = new DateFormat.yMMMMd(window.navigator.language).add_Hm();
          p['created_time'] = df.format(d);
        }
        
        var data = {};
        data['id'] = p['id'];
        data['message'] = p['message'];
        data['created_time'] = p['created_time'];
        data['picture'] = p['picture'];
        data['story'] = p['story'];
        data['type'] = p['type'];
        data['status_type'] = p['status_type'];
        pagePostList.add(data);
      }
      
      if(resp.paging != null && resp.paging.next != null){
        if(resp.paging.next == nextPagePostToken){
          nextPagePostToken = null;
          return;
        }
        nextPagePostToken = resp.paging.next;
      }
      js.release(resp);
    });
  }
  
  
  void getUserFacebookPages(){
    pagesListLoading = true;
    FB.api('/me/accounts').then((js.Proxy resp){
      pagesListLoading = false;
      var data = resp.data;
      int len = data.length;
      for(int i=0; i<len; i++){
        var p = data[i];
        FacebookPage page = new FacebookPage(p.category, p.name, p.access_token, p.id);
        pagesList.add(page);
      }
    });
  }
  
  
  void _createSpreadsheetForPage(){
    if(!isGoogleConnected) return;
    var dialog = query('#CreateSpreadsheetDialog');
    (query('#SpreadsheetName') as InputElement).value = '';
    
    if(dialog.classes.contains("hidden")){
      dialog.classes.remove("hidden");
    }
    dialog.xtag.show();
    
    StreamSubscription<MouseEvent> ev;
    ev = dialog.onClick.listen((Event e){
      Element el = e.target;
      if(el.dataset.containsKey('accept')){
        InputElement ie = query('#SpreadsheetName');
        var value = ie.value;
        
        GDrive d = new GDrive(auth);
        spreadsheetUpdating = true;
        d.createStructuredSpreadsheet(value, SpreadsheetService.PAGE_POSTS_COLUMNS_SET)
          .then((drivelib.File data) => SpreadsheetService.getSpreadsheetMetaData(data.id))
            .then((SpreadsheetMeta metadata) => updatePagesConfig(metadata))
            .then((_){spreadsheetUpdating = false;})
            .catchError((e){
              spreadsheetUpdating = false;
              print('error');
              window.console.log(e);
            });
        dialog.xtag.hide();
        ev.cancel();
      }
    });
  }
  
  /// Event handler to handle "select spreadsheet" action
  void _selectSpreadsheetForPage(){
    
    if(!isGoogleConnected) {
      new Toast.makeText("You must be signed in to Google Service to attach a spreadsheet.");
      return;
    }
    //TODO: dialog with information.
    
    
    auth.login(immediate: true).then((var token){
      DrivePicker dp = new DrivePicker();
      
      dp.createSpreadsheetPicker(token.data)
      .then((String sheetId) => SpreadsheetService.getSpreadsheetMetaData(sheetId))
      .then((SpreadsheetMeta metadata) => updatePagesConfig(metadata))
      .then((_){
        spreadsheetUpdating = false;
      })
      .catchError((e){
        spreadsheetUpdating = false;
        print('error');
        window.console.log(e);
        new Toast.makeText("Error occured: $e");
      });
    })
    .catchError((e){
      new Toast.makeText("Error occured: $e");
    });
  }
  
  
  void updatePagesConfig(SpreadsheetMeta metadata){
    FacebookPageConfig cfg;
    if(facebookPagesConfig.containsKey(selectedPage)){
      cfg = facebookPagesConfig[selectedPage];
    } else {
      cfg = new FacebookPageConfig();
      cfg.pageId = selectedPage;
    }
    SheetMeta sheet = metadata.sheets.first;
    cfg.sheetId = sheet.id;
    cfg.sheetTitle = sheet.title;
    cfg.spreadsheetTitle = metadata.title;
    cfg.fileId = metadata.id;
    facebookPagesConfig[selectedPage] = cfg;
    //watchers.dispatch();
    new AppStore().savePagesConfig(facebookPagesConfig);
  }
  
  ///Remove spreadsheet associacion from current page
  void _detachCurrentSpreadsheet(){
    if(!facebookPagesConfig.containsKey(selectedPage)){
      return;
    }
    FacebookPageConfig cfg = facebookPagesConfig[selectedPage];
    cfg.sheetId = null;
    cfg.sheetTitle = null;
    cfg.spreadsheetTitle = null;
    cfg.fileId = null;
    cfg.rowId = null;
    facebookPagesConfig[selectedPage] = cfg;
    
    new AppStore().savePagesConfig(facebookPagesConfig);
  }
  ///Replace currently attached sheet with other one from the same spreadsheet
  void _replaceSheet(var new_id){
    if(!spreadsheetSheetsList.containsKey(fbi.currentPageConfig.fileId)){
      return;
    }
    List<SheetMeta> metadata = spreadsheetSheetsList[fbi.currentPageConfig.fileId];
    String sheetTitle;
    for(SheetMeta meta in metadata){
      if(meta.id == new_id){
        sheetTitle = meta.title;
        break;
      }
    }
    if(sheetTitle == null){
      return;
    }
    FacebookPageConfig cfg = facebookPagesConfig[selectedPage];
    cfg.sheetId = new_id;
    cfg.sheetTitle = sheetTitle;
    facebookPagesConfig[selectedPage] = cfg;
    
    new AppStore().savePagesConfig(facebookPagesConfig);
  }
  /// Show dialog which allows a user create and attach new spreadsheet.
  void _addNewSheet(){
    if(!isGoogleConnected) return;
    var dialog = query('#CreateSheetDialog');
    (query('#SheetName') as InputElement).value = '';
    
    if(dialog.classes.contains("hidden")){
      dialog.classes.remove("hidden");
    }
    
    dialog.xtag.show();
    
    StreamSubscription<MouseEvent> ev;
    ev = dialog.onClick.listen((Event e){
      Element el = e.target;
      if(el.dataset.containsKey('accept')){
        InputElement ie = query('#SheetName');
        var value = ie.value;
        
        spreadsheetUpdating = true;
        SpreadsheetService.addNewWorksheet(value, fbi.currentPageConfig.fileId, SpreadsheetService.PAGE_POSTS_COLUMNS_SET)
          .then((SheetMeta meta){
            spreadsheetUpdating = false;
            FacebookPageConfig cfg = facebookPagesConfig[selectedPage];
            cfg.sheetId = meta.id;
            cfg.sheetTitle = meta.title;
            facebookPagesConfig[selectedPage] = cfg;
            new AppStore().savePagesConfig(facebookPagesConfig);
            updateWorksheetListInActionMenu();
          })
          .catchError((e){
            print('error');
            window.console.log(e);
          });
          
          dialog.xtag.hide();
          ev.cancel();
        }
      });
  }
  
  void updateWorksheetListInActionMenu(){
    spreadsheetSheetsListLoading = true;
    spreadsheetUpdating = true;
    SpreadsheetService.getSpreadsheetMetaData(fbi.currentPageConfig.fileId)
      .then((SpreadsheetMeta metadata){
        if(metadata.sheets.length > 0){
          spreadsheetSheetsList[fbi.currentPageConfig.fileId] = metadata.sheets;
        } else {
          if(spreadsheetSheetsList.containsKey(fbi.currentPageConfig.fileId)){
            spreadsheetSheetsList.remove(fbi.currentPageConfig.fileId);
          }
        }
        spreadsheetSheetsListLoading = false;
        spreadsheetUpdating = false;
      });
  }
  
  void addSelectionToWorksheet(){
    
    if(!facebookPagesConfig.containsKey(selectedPage)){
      new Toast.makeText("You must attach spreadsheet first.")
      ..show();
      return;
    }
    
    ElementList list = queryAll('#PostChooser :checked');
    if(list.isEmpty){
      new Toast.makeText("You need to select at least one post.")
      ..show();
      return;
    }
    List<String> postsList = new List();
    list.forEach((Element e) => postsList.add(e.dataset['postid']));
    if(postsList.isEmpty){
      new Toast.makeText("You need to select at least one post.")
      ..show();
      return;
    }
    
    _handlePostSendAction(postsList);
  }
  
  
  void _handlePostSendAction(List<String> postsList){
    
    //show loaders in posts list.
    postsList.forEach((String post_id) {
      Element indicator = query('[data-postindicator="$post_id"]');
      if(indicator != null){
        indicator.classes.remove("hidden");
        indicator.classes.add("loader progress progress-info progress-striped active");
      }
    });
    
    FacebookPageConfig cfg = facebookPagesConfig[selectedPage];
    pagePostInsightLoading = true;
    FB.downloadDefaultInsights(postsList)
      .then((List<FacebookPagePostInsight> data) => InsightRequest.postToSpreadsheet(data, cfg.fileId, cfg.sheetId))
      .then((Map serverResult){
        pagePostInsightLoading = false;
        //hide loaders in posts list.
        serverResult.forEach((String post_id, int server_response) {
          Element indicator = query('[data-postindicator="$post_id"]');
          if(indicator != null){
            if(server_response == 201){
              indicator.classes.add("hidden");
              indicator.classes.removeAll(["loader","progress","progress-info","progress-striped","active"]);
            } else {
              indicator.classes.removeAll(["active","progress-info"]);
              indicator.classes.add("progress-danger");
            }
          }
        });
        // look for posts which are not have statistics available
        // therefore they are not in the list. 
        ElementList emptyList = queryAll('[data-postindicator][class~="active"]');
        if(emptyList.isNotEmpty){
          new Toast.makeText("Some elements has not ben added to spreadsheet.").show();
        }
        emptyList.forEach((Element element){
          element.classes.removeAll(["progress-info","progress-striped","active"]);
          element.classes.add("progress-warning");
          
          Element conainer = element.parent.parent.parent;
          Element alert = conainer.query('[is="x-alert"]');
          window.console.log(alert);
          if(alert == null || alert.xtag == null) return;
          alert.classes.remove('hidden');
          alert.xtag.show();
          
        });
        
      })
      .catchError((e){
        print('error');
        window.console.log(e);
        pagePostInsightLoading = false;
        new Toast.makeText(e.toString(), Toast.LENGTH_INFINITY, true).show();
        
        //hide loaders that are OK and whow error for error.
        postsList.forEach((String post_id) {
          Element indicator = query('[data-postindicator="$post_id"]');
          if(indicator != null){
            indicator.classes.remove("active progress-info");
            indicator.classes.add("progress-danger");
          }
        });
      });
  }
  
  void postsListWrapperHandler(Event e){
    Element target = e.target;
    if(target.dataset['action'] != null){
      
      e.preventDefault();
      switch(target.dataset['action']){
        case 'add-single-post': 
          List<String> postsList = new List();
          postsList.add(target.dataset['postid']);
          _handlePostSendAction(postsList);
        break;
        case 'show-post-details':
          selectPost(target.dataset['postid']);
        break;
      }
    }
  }
  
  void performBackAction(){
    
    if(selectedPost != null){
      selectedPost = null;
      pagePostInsights = null;
      return;
    }
    
    
    selectedPage = null;
    Element el = query("#PageChooser *[data-selected-page=true]");
    if(el != null){
      el.attributes.remove('data-selected-page');
    }
    
    nextPagePostToken = null;
    pagePostList.clear();
  }
  
  List<String> _alowedExtenralAction = ['select-spreadsheet-for-page','create-spreadsheet-for-page','detach-spreadsheet-from-page','add-worksheet-to-page','replace-worksheet-for-page'];
  void performExternalAction(String action, [var data=null]){
    
    if(_alowedExtenralAction.indexOf(action) == -1) return;
    //print(action);
    switch(action){
      case 'select-spreadsheet-for-page': 
        _selectSpreadsheetForPage();
      break;
      case 'create-spreadsheet-for-page': 
        _createSpreadsheetForPage();
      break;
      case 'detach-spreadsheet-from-page':
        _detachCurrentSpreadsheet();
      break;
      case 'add-worksheet-to-page':
        _addNewSheet();
        break;
      case 'replace-worksheet-for-page':
        _replaceSheet(data);
        break;
    }
  }
  
  ///Select post for details
  void selectPost(String post_id){
    selectedPost = null;
    Timer.run(() => _selectPost(post_id));
  }
  
  void _selectPost(String post_id){
    selectedPost = post_id;
    
    String query = '#PostChooser [is="x-facebook-post-list-item"]';
    ElementList all = queryAll(query);
    all.forEach((Element _){
      if(_.xtag == null) return;
      if(_.dataset['id'] == post_id){
        _.xtag.selection = true;
      } else {
        _.xtag.selection = false;
      }
    });
    
    pagePostInsightLoading = true;
    
    Fql fql = new Fql();
    FqlQuery q1 = new FqlQuery();
    q1.table = 'insights';
    q1.metrics
    ..add('object_id')
    ..add('metric')
    ..add('value');
    q1
      ..addCondition('period', '= 0')
      ..addCondition('metric', 'IN ("post_impressions_unique","post_stories_by_action_type","post_story_adds_by_action_type_unique","post_storytellers")')
      ..addCondition('object_id', '= "$post_id"');
    FqlQuery q2 = new FqlQuery();
    q2.table = 'stream';
    q2.metrics.addAll(["post_id","created_time","message","type","attachment.media","attachment.fb_object_type","attachment.icon","permalink","description"]);
    q2
      ..addCondition('post_id', 'IN (SELECT object_id FROM #query1)');
    fql
      ..append(q1)
      ..append(q2);
    FB.downloadInsights(fql)
      .then((List data) {
        pagePostInsightLoading = false;
        if(data.length == 0){
          new Toast.makeText("No insights data available for this post", Toast.LENGTH_INFINITY, true).show();
          return;
        }
        
        pagePostInsights = data;
      })
      .catchError((e){
        print('error');
        window.console.log(e);
        pagePostInsightLoading = false;
        new Toast.makeText(e.toString(), Toast.LENGTH_INFINITY, true).show();
      });
  } 
}



class PostsSelectionController {
  
  /// True if single selection is on.
  bool get postSelectedMode => fbi.selectedPost != null;
  /// If single selection mode
  /// it will hold current selection
  String singleSelectedPostId;
  
  /// List of selected pages
  List<String> get selection {
    String query = '#PostChooser [is="x-facebook-post-list-item"]';
    ElementList all = queryAll(query);
    List<String> result = new List();
    all.forEach((Element _){
      if(_.xtag == null) return;
      result.add(_.dataset['id']);
    });
    return result;
  }
  
  void _clearSelection(){
    String query = '#PostChooser [is="x-facebook-post-list-item"]';
    ElementList all = queryAll(query);
    all.forEach((Element _){
      if(_.xtag == null) return;
      _.xtag.selection = false;
    });
  }
  
  void select(String post_id, bool state){
    if(postSelectedMode){
      if(post_id == fbi.selectedPost && !state){
        return;
      }
      _clearSelection();
      if(!state){
        return;
      }
    }
    String qry = '#PostChooser [is="x-facebook-post-list-item"][data-id="$post_id"]';
    Element post = query(qry);
    if(post == null || post.xtag == null) return;
    post.xtag.selection = state;
    if(postSelectedMode && state){
      fbi.selectPost(post_id);
    }
  }
}



/*
 
Update spreadsheet cells.

POST https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/batch
Gdata-version: 3.0
Content-type: application/atom+xml
Authorization: Bearer ya29.AHES6ZSkdmZkVGdjQHG480XRrvVkOpIQZfSBI8UqMyC1zdo
If-none-match: 686897696a7c876b7e


<feed xmlns="http://www.w3.org/2005/Atom"
      xmlns:batch="http://schemas.google.com/gdata/batch"
      xmlns:gs="http://schemas.google.com/spreadsheets/2006">
  <id>https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full</id>
  <entry>
    <batch:id>A1</batch:id>
    <batch:operation type="update"/>
    <id>https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/R1C1</id>
    <link rel="edit" type="application/atom+xml"
      href="https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/R1C1/version"/>
    <gs:cell row="1" col="1" inputValue="newData"/>
  </entry>
  <entry>
    <batch:id>A2</batch:id>
    <batch:operation type="update"/>
    <title type="text">A2</title>
    <id>https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/R1C2</id>
    <link rel="edit" type="application/atom+xml" href="https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/R1C2/version"/>
    <gs:cell row="1" col="2" inputValue="moreInfo"/>
  </entry>
</feed>
 
 * */

// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  final __html0 = new autogenerated.Element.html('<span class="">You are not logged in to Google Services</span>'), __html1 = new autogenerated.Element.html('<input type="button" class="btn" value="Google login">'), __html10 = new autogenerated.Element.html('<div is="x-facebook-post-list-item"></div>'), __html11 = new autogenerated.Element.html('<div class="facebook-post-load-next">\n                  <a href="#" class="btn">Load more</a>\n                </div>'), __html12 = new autogenerated.Element.tag('template'), __html13 = new autogenerated.Element.tag('template'), __html14 = new autogenerated.Element.html('<div class="">Loading post data</div>'), __html15 = new autogenerated.Element.tag('template'), __html16 = new autogenerated.Element.html('<div class="span9" is="x-post-insights"></div>'), __html2 = new autogenerated.Element.html('<input type="button" class="btn" value="Logout Google">'), __html3 = new autogenerated.Element.html('<div class="progress progress-striped active">\n                <div class="bar" style="width: 100%;"></div>\n            </div>'), __html4 = new autogenerated.Element.html('<div class="row-fluid">\n          <!-- Not logged in to Facebook view -->\n          <div id="FacebookLogin" class="span4">\n            <div class="NotLoggedInMessage"><span class="hello">Hello,</span><br>You\'re not logged into Facebook. Login clicking button below.</div>\n            <div class="fblogin-action">\n              <input type="button" class="btn btn-primary" value="Facebook login">\n            </div>\n          </div>\n        </div>'), __html5 = new autogenerated.Element.html('<div class="page-content   row-fluid">\n          \n          <!-- Facebook page selector -->\n          <div id="PageChooser" class="">\n            <h2 class="wide-title">Choose a page</h2>\n            <template></template>\n          </div>\n          \n          \n          \n          <!-- Empty posts list message -->\n          <template></template>\n          \n          <!-- The list of posts -->\n          <template></template>\n        </div>'), __html6 = new autogenerated.Element.html('<div is="x-facebook-page-item"></div>'), __html7 = new autogenerated.Element.html('<div class="row-fluid">\n              <div id="EmptyPostsList" class="span4">\n                <div class="NoPostsMessage"><span class="hello">Hurray!</span><br>There\'s no post here. Go for a coffe.</div>\n              </div>\n            </div>'), __html8 = new autogenerated.Element.html('<div id="PostChooser" class="">\n              \n              <div class="row-fluid">\n                <div class="span8">\n                  <h2 class="wide-title">Posts overview</h2>\n                </div>\n                <div class="span4 hidden-on-post-details">\n                  date changer\n                </div>  \n              </div>\n              \n              <template></template>\n              \n              <!-- Posts list -->\n              <div id="PostsListWrapper">\n              <template></template>\n              </div>\n              <!-- Load next button -->\n              <template></template>\n                \n            </div>'), __html9 = new autogenerated.Element.html('<div is="x-post-interaction"></div>');
  var __e1, __e27, __e28, __e29, __e3, __e4, __e7;
  var __t = new autogenerated.Template(__root);
  __e1 = __root.nodes[1].nodes[1].nodes[1].nodes[1];
  __t.conditional(__e1, () => !fbi.isGoogleConnected, (__t) {
    var __e0;
    __e0 = __html1.clone(true);
    __t.listen(__e0.onClick, ($event) { fbi.googleLogin(); });
  __t.addAll([new autogenerated.Text('\n            '),
      new autogenerated.Text('\n            '),
      __html0.clone(true),
      new autogenerated.Text('\n            '),
      __e0,
      new autogenerated.Text('\n          ')]);
  });

  __e3 = __root.nodes[1].nodes[1].nodes[1].nodes[3];
  __t.conditional(__e3, () => fbi.isGoogleConnected, (__t) {
    var __e2;
    __e2 = __html2.clone(true);
    __t.listen(__e2.onClick, ($event) { fbi.googleLogout(); });
  __t.addAll([new autogenerated.Text('\n            '),
      __e2,
      new autogenerated.Text('\n          ')]);
  });

  __e4 = __root.nodes[1].nodes[1].nodes[3].nodes[1];
  __t.conditional(__e4, () => fbi.loading, (__t) {
  __t.addAll([new autogenerated.Text('\n            '),
      __html3.clone(true),
      new autogenerated.Text('\n          ')]);
  });

  __e7 = __root.nodes[3].nodes[1];
  __t.conditional(__e7, () => !fbi.isFacebookConnected, (__t) {
    var __e5, __e6;
    __e6 = __html4.clone(true);
    __e5 = __e6.nodes[3].nodes[3].nodes[1];
    __t.listen(__e5.onClick, ($event) { fbi.facebookLogin(); });
  __t.addAll([new autogenerated.Text('\n        '),
      __e6,
      new autogenerated.Text('\n      ')]);
  });

  __e27 = __root.nodes[3].nodes[3];
  __t.conditional(__e27, () => fbi.isFacebookConnected, (__t) {
    var __e10, __e11, __e25, __e26, __e9;
    __e26 = __html5.clone(true);
    __e10 = __e26.nodes[3];
    __e9 = __e10.nodes[3];
    __t.loop(__e9, () => fbi.pagesList, ($list, $index, __t) {
      var page = $list[$index];
      var __e8;
      __e8 = __html6.clone(true);
      __t.listen(__e8.onClick, ($event) { fbi.selectPage(page.id); });
      __t.oneWayBind(() => page, (e) { if (__e8.xtag.page != e) __e8.xtag.page = e; }, false, false);
      __t.component(new FacebookPageItemComponent()..host = __e8);
    __t.addAll([new autogenerated.Text('\n              '),
        __e8,
        new autogenerated.Text('\n            ')]);
    });
    __t.bindClass(__e10, () => chooserClass, false);
    __e11 = __e26.nodes[7];
    __t.conditional(__e11, () => fbi.selectedPage != null && fbi.pagePostList.length == 0 && !fbi.loading, (__t) {
    __t.addAll([new autogenerated.Text('\n            '),
        __html7.clone(true),
        new autogenerated.Text('\n          ')]);
    });

    __e25 = __e26.nodes[11];
    __t.conditional(__e25, () => fbi.pagePostList.length > 0, (__t) {
      var __e13, __e15, __e16, __e19, __e20, __e24;
      __e20 = __html8.clone(true);
      __e13 = __e20.nodes[3];
      __t.conditional(__e13, () => fbi.selectedPost == null, (__t) {
        var __e12;
        __e12 = __html9.clone(true);
        __t.oneWayBind(() => fbi, (e) { if (__e12.xtag.fbi != e) __e12.xtag.fbi = e; }, false, false);
        __t.component(new PostInteraction()..host = __e12);
      __t.addAll([new autogenerated.Text('\n                '),
          __e12,
          new autogenerated.Text('\n              ')]);
      });

      __e16 = __e20.nodes[7];
      __e15 = __e16.nodes[1];
      __t.loop(__e15, () => fbi.pagePostList, ($list, $index, __t) {
        var post = $list[$index];
        var __e14;
        __e14 = __html10.clone(true);
        __t.oneWayBind(() => fbi.postsSelectionController, (e) { if (__e14.xtag.ctrl != e) __e14.xtag.ctrl = e; }, false, false);
        __t.oneWayBind(() => post['id'], (e) { if (__e14.dataset['id'] != e) __e14.dataset['id'] = e; }, false, false);
        __t.oneWayBind(() => post, (e) { if (__e14.xtag.post != e) __e14.xtag.post = e; }, false, false);
        __t.component(new FacebookPostListItemComponent()..host = __e14);
      __t.addAll([new autogenerated.Text('\n                '),
          __e14,
          new autogenerated.Text('\n              ')]);
      });
      __t.listen(__e16.onClick, ($event) { fbi.postsListWrapperHandler($event); });
      __e19 = __e20.nodes[11];
      __t.conditional(__e19, () => fbi.isNextPagePostToken, (__t) {
        var __e17, __e18;
        __e18 = __html11.clone(true);
        __e17 = __e18.nodes[1];
        __t.listen(__e17.onClick, ($event) { fbi.loadNextPostsPage($event); });
      __t.addAll([new autogenerated.Text('\n                '),
          __e18,
          new autogenerated.Text('\n              ')]);
      });

      __t.bindClass(__e20, () => postsListClass, false);
      __e24 = __html12.clone(true);
      __t.conditional(__e24, () => fbi.selectedPost != null, (__t) {
        var __e21, __e23;
        __e21 = __html13.clone(true);
        __t.conditional(__e21, () => fbi.selectedPost != null && fbi.pagePostInsightLoading, (__t) {
        __t.addAll([new autogenerated.Text('\n                '),
            __html14.clone(true),
            new autogenerated.Text('\n              ')]);
        });

        __e23 = __html15.clone(true);
        __t.conditional(__e23, () => fbi.pagePostInsights != null && !fbi.pagePostInsightLoading, (__t) {
          var __e22;
          __e22 = __html16.clone(true);
          __t.listen(__e22.onClick, ($event) { fbi.postsListWrapperHandler($event); });
          __t.oneWayBind(() => fbi, (e) { if (__e22.xtag.ctrl != e) __e22.xtag.ctrl = e; }, false, false);
          __t.component(new FacebookPostInsightView()..host = __e22);
        __t.addAll([new autogenerated.Text('\n                '),
            __e22,
            new autogenerated.Text('\n              ')]);
        });

      __t.addAll([new autogenerated.Text('\n              '),
          new autogenerated.Text('\n              '),
          __e21,
          new autogenerated.Text('\n              '),
          __e23,
          new autogenerated.Text('\n            ')]);
      });

    __t.addAll([new autogenerated.Text('\n            '),
        __e20,
        new autogenerated.Text('\n            \n            '),
        new autogenerated.Text('\n            '),
        __e24,
        new autogenerated.Text('\n            \n            \n          ')]);
    });

    __t.bindClass(__e26, () => selectedPageClass, false);
    __t.bindClass(__e26, () => selectedPostClass, false);
  __t.addAll([new autogenerated.Text('\n        \n        \n        \n        '),
      __e26,
      new autogenerated.Text('\n      ')]);
  });

  __e28 = __root.nodes[7];
  __t.component(new Modal()..host = __e28);
  __e29 = __root.nodes[9];
  __t.component(new Modal()..host = __e29);
  __t.create();
  __t.insert();
}

//# sourceMappingURL=fbreporter.dart.map