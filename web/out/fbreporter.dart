// Auto-generated from fbreporter.html.
// DO NOT EDIT.

library fbreporter;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'pageitem.html.dart';
import 'postlistitem.html.dart';
import 'dart:html';
import 'dart:async';
import "dart:json" as JSON;
import 'package:intl/intl.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:web_ui/web_ui.dart';
import 'package:google_drive_v2_api/drive_v2_api_browser.dart' as drivelib;
import 'package:google_oauth2_client/google_oauth2_browser.dart';
import 'package:js/js.dart' as js;
import 'package:widget/widget.dart';
import 'package:widget/effects.dart';
import 'package:widget/components/modal.dart';
part '../facebook.dart';
part '../drive.dart';
part '../store.dart';


// Original code


final CLIENT_ID = "933209257700.apps.googleusercontent.com";
final SCOPES = [drivelib.Drive.DRIVE_FILE_SCOPE,drivelib.Drive.DRIVE_SCOPE, 'https://spreadsheets.google.com/feeds','https://docs.google.com/feeds', 'https://www.googleapis.com/auth/userinfo.profile'];
final FB_SCOPES = ['manage_pages','read_insights'];


var startingCount = 0;
var fbi;
String get selectedPageClass => fbi.selectedPage == null ? '' : 'selectedPage';
String get chooserClass => fbi.selectedPage == null ? 'span12' : 'span3';
String get googleActionButtonsClass => fbi.isGoogleConnected ? '' : 'disabled';

void main() {
  initializeDateFormatting("window.navigator.language", null).then((_){});
  
  fbi = new FacebookInsights();
}



class FacebookInsights extends Observable  {
  GoogleOAuth2 auth;
  
  Token __$google_auth_token;
  Token get google_auth_token {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'google_auth_token');
    }
    return __$google_auth_token;
  }
  set google_auth_token(Token value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'google_auth_token',
          __$google_auth_token, value);
    }
    __$google_auth_token = value;
  }
  FacebookAuth __$fbauth;
  FacebookAuth get fbauth {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'fbauth');
    }
    return __$fbauth;
  }
  set fbauth(FacebookAuth value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'fbauth',
          __$fbauth, value);
    }
    __$fbauth = value;
  }
  bool __$pagesListLoading = false;
  bool get pagesListLoading {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'pagesListLoading');
    }
    return __$pagesListLoading;
  }
  set pagesListLoading(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'pagesListLoading',
          __$pagesListLoading, value);
    }
    __$pagesListLoading = value;
  }
  bool __$pagePostListLoading = false;
  bool get pagePostListLoading {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'pagePostListLoading');
    }
    return __$pagePostListLoading;
  }
  set pagePostListLoading(bool value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'pagePostListLoading',
          __$pagePostListLoading, value);
    }
    __$pagePostListLoading = value;
  }
  List<FacebookPage> __$pagesList = toObservable([]);
  List<FacebookPage> get pagesList {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'pagesList');
    }
    return __$pagesList;
  }
  set pagesList(List<FacebookPage> value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'pagesList',
          __$pagesList, value);
    }
    __$pagesList = value;
  }
  List __$pagePostList = toObservable([]);
  List get pagePostList {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'pagePostList');
    }
    return __$pagePostList;
  }
  set pagePostList(List value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'pagePostList',
          __$pagePostList, value);
    }
    __$pagePostList = value;
  }
  bool get loading => pagesListLoading || pagePostListLoading;
  String __$selectedPage;
  String get selectedPage {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'selectedPage');
    }
    return __$selectedPage;
  }
  set selectedPage(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'selectedPage',
          __$selectedPage, value);
    }
    __$selectedPage = value;
  }
  String __$nextPagePostToken;
  String get nextPagePostToken {
    if (__observe.observeReads) {
      __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'nextPagePostToken');
    }
    return __$nextPagePostToken;
  }
  set nextPagePostToken(String value) {
    if (__observe.hasObservers(this)) {
      __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'nextPagePostToken',
          __$nextPagePostToken, value);
    }
    __$nextPagePostToken = value;
  }
  
  bool get isFacebookConnected => fbauth != null && fbauth.accessToken != '';
  bool get isGoogleConnected => google_auth_token != null;
  bool get isNextPagePostToken => nextPagePostToken != null;
  
  
  FacebookInsights(){
    auth = new GoogleOAuth2(CLIENT_ID, SCOPES);
    
    auth.login(immediate: true).then(handleGoogleToken);
    setUpFacebook();
    
  }
  
  void googleLogin(){
    auth.login().then(handleGoogleToken);
  }
  
  void googleLogout(){
    auth.logout();
    google_auth_token = null;
  }
  
  void facebookLogin(){
    FB.login(FB_SCOPES).then(_handleFacebookLogin).catchError((var error){
      //TODO: error catch
    });
  }
  
  void _handleFacebookLogin(var response){
    fbauth = response;
    if(fbauth != null && fbauth.accessToken != null){
      getUserFacebookPages();
    }
  }
  
  void handleGoogleToken(var token){
    auth.token = token;
    google_auth_token = token;
  }
  
  void setUpFacebook(){
    js.context.onFacebookReady = new js.Callback.once(onFacebookReady);
    var script = new ScriptElement();
    script.src = '//connect.facebook.net/en_US/all.js';
    document.body.nodes.add(script);
  }
  
  void onFacebookReady(){
    FB.getLoginStatus().then(_handleFacebookLogin).catchError((var error){
      //TODO: error catch
    });
  }
  
  void selectPage(var pageId){
    selectedPage = pageId;
    
    Element el = query("#PageChooser *[data-selected-page=true]");
    if(el != null){
      el.attributes.remove('data-selected-page');
    }
    
    el = query('#PageChooser *[data-pageid="'+pageId+'"]');
    if(el != null){
      el.attributes.putIfAbsent('data-selected-page', (){ return 'true'; });
    }
    
    nextPagePostToken = null;
    pagePostList.clear();
    Element target = query('#SelectAllPostsToggle');
    if(target != null) {
      target.dataset.remove('state');
    }
    getPagePosts();
  }
  
  
  void loadNextPostsPage(Event e){
    e.preventDefault();
    getPagePosts();
  }
  
  void getPagePosts(){
    pagePostListLoading = true;
    var path = '';
    if(nextPagePostToken == null || nextPagePostToken.isEmpty){
      path = '/$selectedPage/posts?fields=id,message,story,created_time,picture,type,status_type';
    } else {
      path = nextPagePostToken;
    }
    
    FB.api(path).then((js.Proxy resp){
      pagePostListLoading = false;
      
      if(resp == null) {nextPagePostToken = null; return;}
      if(resp.data == null || resp.data.length == 0) {nextPagePostToken = null; return;}
      var len = resp.data.length;
      
      for(int i=0; i<len; i++){
        var p = resp.data[i];
        
        if(p['status_type'] == null){
          continue;
        }
        if(p['created_time'] != null){
          DateTime d = DateTime.parse(p['created_time']);
          DateFormat df = new DateFormat.yMMMMd(window.navigator.language).add_Hm();
          p['created_time'] = df.format(d);
        }
        
        var data = {};
        data['id'] = p['id'];
        data['message'] = p['message'];
        data['created_time'] = p['created_time'];
        data['picture'] = p['picture'];
        data['story'] = p['story'];
        data['type'] = p['type'];
        data['status_type'] = p['status_type'];
        pagePostList.add(data);
      }
      
      if(resp.paging != null && resp.paging.next != null){
        if(resp.paging.next == nextPagePostToken){
          nextPagePostToken = null;
          return;
        }
        nextPagePostToken = resp.paging.next;
      }
      js.release(resp);
    });
  }
  
  void togglePostsSelection(Event e){
    e.preventDefault();
    Element target = query('#SelectAllPostsToggle');
    if(target == null) return;
    var dataset = target.dataset;
    
    if(!dataset.containsKey('state') || dataset['state'] == 'none'){
      ElementList all = queryAll('#PostChooser input[type="checkbox"]:not(:checked)');
      all.forEach((CheckboxInputElement _){
        _.checked = true;
      });
      dataset['state'] = 'all';
    } else {
      ElementList all = queryAll('#PostChooser input[type="checkbox"]:checked');
      all.forEach((CheckboxInputElement _){
        _.checked = false;
      });
      dataset['state'] = 'none';
    }
  }
  
  void getUserFacebookPages(){
    
    pagesListLoading = true;
    FB.api('/me/accounts').then((js.Proxy resp){
      pagesListLoading = false;
      var data = resp.data;
      int len = data.length;
      for(int i=0; i<len; i++){
        var p = data[i];
        FacebookPage page = new FacebookPage(p.category, p.name, p.access_token, p.id);
        pagesList.add(page);
      }
    });
  }
  
  
  void createSpreadsheetForPage(Event e){
    e.preventDefault();
    if(!isGoogleConnected) return;
    var dialog = query('#CreateSpreadsheetDialog');
    ModalManager.show(dialog).then((var res){
      
      var width = dialog.offsetWidth;
      var height = dialog.offsetHeight;
      
      var top = window.innerHeight/2 - height/2;
      var left = window.innerWidth/2 - width/2;
      
      dialog.style.top = '${top}px';
      dialog.style.left = '${left}px';
      
      StreamSubscription<MouseEvent> ev;
      ev = dialog.onClick.listen((Event e){
        Element el = e.target;
        if(el.dataset.containsKey('dismiss')){
          ModalManager.hide(dialog);
          ev.cancel();
        } else if(el.dataset.containsKey('accept')){
          InputElement ie = query('#SpreadsheetName');
          var value = ie.value;
          
          GDrive d = new GDrive(auth);
          d.createStructuredSpreadsheet(value)
            .then((data){
              print('OK');
              print(data.id);
            })
            .catchError((e){
              print('error');
              window.console.log(e);
            });
          
          
          ModalManager.hide(dialog);
          ev.cancel();
        }
      });
    });
    
    
    
    return;
    //<id>https://spreadsheets.google.com/feeds/list/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/1</id>
    
    
    
  }
  void selectSpreadsheetForPage(Event e){
    e.preventDefault();
    if(!isGoogleConnected) return;
    
  }
  
}


//Utility methods
void openDropdown(Event  e, String action){
  e.preventDefault();
  e.stopPropagation();
  
  Element dropdown;
  switch(action){
    case 'spreadsheet-actions': 
      dropdown = query('#SpreadsheetActions');
    break;
  }
  
  if(dropdown == null) return;
  dropdown.classes.remove('hidden');
  
  
  // close when user click on whatever
  StreamSubscription<MouseEvent> ev;
  ev = window.onClick.listen((Event e){
    
    Element el = e.target;
    var close = false;
    while(true){
      if(el.dataset.containsKey('data-action') && el.dataset['data-action'] == action){
        // click on myself.
        return;
      }
      if(el.tagName.toLowerCase() == 'body'){
        //close me, pls.
        close = true;
        break;
      }
      el = el.parent;
    }
    if(close){
      dropdown.classes.add('hidden');
      ev.cancel();
    }
  });
}





/*
 
Update spreadsheet cells.

POST https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/batch
Gdata-version: 3.0
Content-type: application/atom+xml
Authorization: Bearer ya29.AHES6ZSkdmZkVGdjQHG480XRrvVkOpIQZfSBI8UqMyC1zdo
If-none-match: 686897696a7c876b7e


<feed xmlns="http://www.w3.org/2005/Atom"
      xmlns:batch="http://schemas.google.com/gdata/batch"
      xmlns:gs="http://schemas.google.com/spreadsheets/2006">
  <id>https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full</id>
  <entry>
    <batch:id>A1</batch:id>
    <batch:operation type="update"/>
    <id>https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/R1C1</id>
    <link rel="edit" type="application/atom+xml"
      href="https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/R1C1/version"/>
    <gs:cell row="1" col="1" inputValue="newData"/>
  </entry>
  <entry>
    <batch:id>A2</batch:id>
    <batch:operation type="update"/>
    <title type="text">A2</title>
    <id>https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/R1C2</id>
    <link rel="edit" type="application/atom+xml" href="https://spreadsheets.google.com/feeds/cells/0Ajpy9PK_RiBOdDhfdjB2Mk1XbjFSZGNlQS00MUlkaHc/od6/private/full/R1C2/version"/>
    <gs:cell row="1" col="2" inputValue="moreInfo"/>
  </entry>
</feed>
 
 * */

// Additional generated code
void init_autogenerated() {
  var __root = autogenerated.document.body;
  final __html0 = new autogenerated.Element.html('<span class="">You are not logged in to Google Services</span>'), __html1 = new autogenerated.Element.html('<input type="button" class="btn" value="Google login">'), __html10 = new autogenerated.Element.html('<div class="facebook-post-item-container" is="x-facebook-post-list-item"></div>'), __html11 = new autogenerated.Element.html('<div class="facebook-post-load-next">\n                  <a href="#" class="btn">Load more</a>\n                </div>'), __html2 = new autogenerated.Element.html('<input type="button" class="btn" value="Logout Google">'), __html3 = new autogenerated.Element.html('<div class="progress progress-striped active">\n                <div class="bar" style="width: 100%;"></div>\n            </div>'), __html4 = new autogenerated.Element.html('<div class="row-fluid">\n          <!-- Not logged in to Facebook view -->\n          <div id="FacebookLogin" class="span4">\n            <div class="NotLoggedInMessage"><span class="hello">Hello,</span><br>You\'re not logged into Facebook. Login clicking button below.</div>\n            <div class="fblogin-action">\n              <input type="button" class="btn btn-primary" value="Facebook login">\n            </div>\n          </div>\n        </div>'), __html5 = new autogenerated.Element.html('<div class="page-content ">\n          \n          <!-- Facebook page selector -->\n          <div id="PageChooser" class="">\n            <h2 class="wide-title">Choose a page</h2>\n            <template></template>\n          </div>\n          \n          <!-- Empty posts list message -->\n          <template></template>\n          \n          <!-- The list of posts -->\n          <template></template>\n        \n        </div>'), __html6 = new autogenerated.Element.html('<div is="x-facebook-page-item"></div>'), __html7 = new autogenerated.Element.html('<div class="row-fluid">\n              <div id="EmptyPostsList" class="span4">\n                <div class="NoPostsMessage"><span class="hello">Hurray!</span><br>There\'s no post here. Go for a coffe.</div>\n              </div>\n            </div>'), __html8 = new autogenerated.Element.html('<div id="PostChooser" class="span12">\n              \n              <div class="row-fluid">\n                <div class="span8">\n                  <h2 class="wide-title">Posts overview</h2>\n                </div>\n                <div class="span4">\n                  date\n                </div>  \n              </div>\n              <!-- Posts actions container -->\n              <div class="row-fluid post-list-actions">\n                <div class="wrapper flex-container">\n                  <div class="post-action-item">\n                    <input type="button" id="SelectAllPostsToggle" class="list-action-button" value="Select all">\n                  </div>\n                  <div class="post-action-item">\n                    <input type="button" class="list-action-button " value="Add selected to spreadsheet">\n                  </div>\n                  <div data-action="spreadsheet-actions" class="post-action-item">\n                    <a href="#" data-action="spreadsheet-actions" class="list-action-button ">Attach spreadsheet<i class="icon-chevron-down"></i></a>\n                    <div id="SpreadsheetActions" class="action-dialog hidden">\n                      <div class="dialog-wrapper">\n                          <ul class="menu-items">\n                            <li class="main-item">Select</li>\n                            <li class="main-item">Create</li>\n                          </ul>\n                      </div>\n                    </div>\n                  </div>\n                  <div class="post-action-item">\n                    <template></template>\n                    \n                  </div>\n                  <div class="post-action-item flex-auto-item">\n                    <a href="#" class="list-action-button"><i class="icon-chevron-left"></i>Back</a>\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Posts list -->\n              <template></template>\n              \n              <!-- Load next button -->\n              <template></template>\n                \n            </div>'), __html9 = new autogenerated.Element.html('<input type="button" class="list-action-button" value="Log in to spreadsheet service">');
  var __e1, __e27, __e3, __e4, __e7;
  var __t = new autogenerated.Template(__root);
  __e1 = __root.nodes[1].nodes[1].nodes[1].nodes[1];
  __t.conditional(__e1, () => !fbi.isGoogleConnected, (__t) {
    var __e0;
    __e0 = __html1.clone(true);
    __t.listen(__e0.onClick, ($event) { fbi.googleLogin(); });
  __t.addAll([new autogenerated.Text('\n            '),
      new autogenerated.Text('\n            '),
      __html0.clone(true),
      new autogenerated.Text('\n            '),
      __e0,
      new autogenerated.Text('\n          ')]);
  });

  __e3 = __root.nodes[1].nodes[1].nodes[1].nodes[3];
  __t.conditional(__e3, () => fbi.isGoogleConnected, (__t) {
    var __e2;
    __e2 = __html2.clone(true);
    __t.listen(__e2.onClick, ($event) { fbi.googleLogout(); });
  __t.addAll([new autogenerated.Text('\n            '),
      __e2,
      new autogenerated.Text('\n          ')]);
  });

  __e4 = __root.nodes[1].nodes[1].nodes[3].nodes[1];
  __t.conditional(__e4, () => fbi.loading, (__t) {
  __t.addAll([new autogenerated.Text('\n            '),
      __html3.clone(true),
      new autogenerated.Text('\n          ')]);
  });

  __e7 = __root.nodes[3].nodes[1];
  __t.conditional(__e7, () => !fbi.isFacebookConnected, (__t) {
    var __e5, __e6;
    __e6 = __html4.clone(true);
    __e5 = __e6.nodes[3].nodes[3].nodes[1];
    __t.listen(__e5.onClick, ($event) { fbi.facebookLogin(); });
  __t.addAll([new autogenerated.Text('\n        '),
      __e6,
      new autogenerated.Text('\n      ')]);
  });

  __e27 = __root.nodes[3].nodes[3];
  __t.conditional(__e27, () => fbi.isFacebookConnected, (__t) {
    var __e10, __e11, __e25, __e26, __e9;
    __e26 = __html5.clone(true);
    __e10 = __e26.nodes[3];
    __e9 = __e10.nodes[3];
    __t.loop(__e9, () => fbi.pagesList, ($list, $index, __t) {
      var page = $list[$index];
      var __e8;
      __e8 = __html6.clone(true);
      __t.listen(__e8.onClick, ($event) { fbi.selectPage(page.id); });
      __t.oneWayBind(() => page, (e) { if (__e8.xtag.page != e) __e8.xtag.page = e; }, false, false);
      __t.component(new FacebookPageItemComponent()..host = __e8);
    __t.addAll([new autogenerated.Text('\n              '),
        __e8,
        new autogenerated.Text('\n            ')]);
    });
    __t.bindClass(__e10, () => chooserClass, false);
    __e11 = __e26.nodes[7];
    __t.conditional(__e11, () => fbi.selectedPage != null && fbi.pagePostList.length == 0 && !fbi.loading, (__t) {
    __t.addAll([new autogenerated.Text('\n            '),
        __html7.clone(true),
        new autogenerated.Text('\n          ')]);
    });

    __e25 = __e26.nodes[11];
    __t.conditional(__e25, () => fbi.pagePostList.length > 0, (__t) {
      var __e12, __e13, __e14, __e15, __e16, __e18, __e20, __e23, __e24;
      __e24 = __html8.clone(true);
      __e12 = __e24.nodes[5].nodes[1].nodes[1].nodes[1];
      __t.listen(__e12.onClick, ($event) { fbi.togglePostsSelection($event); });
      __e13 = __e24.nodes[5].nodes[1].nodes[3].nodes[1];
      __t.bindClass(__e13, () => googleActionButtonsClass, false);
      __e14 = __e24.nodes[5].nodes[1].nodes[5].nodes[1];
      __t.listen(__e14.onClick, ($event) { openDropdown($event, 'spreadsheet-actions'); });
      __t.bindClass(__e14, () => googleActionButtonsClass, false);
      __e15 = __e24.nodes[5].nodes[1].nodes[5].nodes[3].nodes[1].nodes[1].nodes[1];
      __t.listen(__e15.onClick, ($event) { fbi.selectSpreadsheetForPage($event); });
      __e16 = __e24.nodes[5].nodes[1].nodes[5].nodes[3].nodes[1].nodes[1].nodes[3];
      __t.listen(__e16.onClick, ($event) { fbi.createSpreadsheetForPage($event); });
      __e18 = __e24.nodes[5].nodes[1].nodes[7].nodes[1];
      __t.conditional(__e18, () => !fbi.isGoogleConnected, (__t) {
        var __e17;
        __e17 = __html9.clone(true);
        __t.listen(__e17.onClick, ($event) { fbi.googleLogin(); });
      __t.addAll([new autogenerated.Text('\n                      '),
          new autogenerated.Text('\n                      '),
          __e17,
          new autogenerated.Text('\n                    ')]);
      });

      __e20 = __e24.nodes[9];
      __t.loop(__e20, () => fbi.pagePostList, ($list, $index, __t) {
        var post = $list[$index];
        var __e19;
        __e19 = __html10.clone(true);
        __t.oneWayBind(() => post, (e) { if (__e19.xtag.post != e) __e19.xtag.post = e; }, false, false);
        __t.component(new FacebookPostListItemComponent()..host = __e19);
      __t.addAll([new autogenerated.Text('\n                '),
          __e19,
          new autogenerated.Text('\n              ')]);
      });
      __e23 = __e24.nodes[13];
      __t.conditional(__e23, () => fbi.isNextPagePostToken, (__t) {
        var __e21, __e22;
        __e22 = __html11.clone(true);
        __e21 = __e22.nodes[1];
        __t.listen(__e21.onClick, ($event) { fbi.loadNextPostsPage($event); });
      __t.addAll([new autogenerated.Text('\n                '),
          __e22,
          new autogenerated.Text('\n              ')]);
      });

    __t.addAll([new autogenerated.Text('\n            '),
        __e24,
        new autogenerated.Text('\n          ')]);
    });

    __t.bindClass(__e26, () => selectedPageClass, false);
  __t.addAll([new autogenerated.Text('\n        '),
      __e26,
      new autogenerated.Text('\n      ')]);
  });

  __t.create();
  __t.insert();
}

//# sourceMappingURL=fbreporter.dart.map