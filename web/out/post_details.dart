// Auto-generated from post_details.html.
// DO NOT EDIT.

library x_post_insights;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'post_interaction.dart';
import 'dart:html';
import 'dart:math' as Math;
import 'package:web_ui/web_ui.dart';
import 'package:intl/intl.dart';
import 'package:intl/date_symbol_data_local.dart';


//import 'package:web_ui/safe_html.dart';

/**
 * [FacebookPagePostInsight] represents a view for selected page post.
 */
class FacebookPostInsightView extends WebComponent {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("x-post-insights");
  static final __html1 = new autogenerated.Element.html('<div class="no-post-image">\n                  <div class="no-post-image-info">No photo</div>\n                  <div id="pong">\n                    <div class="pad"></div>\n                    <div class="ball"></div>\n                    <div class="pad"></div>\n                  </div>\n                </div>'), __html2 = new autogenerated.Element.html('<img class="img-polaroid">'), __html3 = new autogenerated.Element.html('<i>No message available</i>'), __html4 = new autogenerated.Element.html('<p class="post-message-body"></p>'), __html5 = new autogenerated.Element.html('<button data-action="add-single-post" class="btn btn-large btn-primary" type="button">Add to spreadsheet</button>'), __html6 = new autogenerated.Element.html('<button class="btn btn-large btn-warning" type="button">Log in to Google Service</button>'), __shadowTemplate = new autogenerated.DocumentFragment.html('''
         
         <div class="row-fluid post-insights">
          <div class="span12">
            <h2 class="wide-title">Post insights</h2>
          </div>
        </div>
        
        <div is="x-post-interaction"></div>
        
        <div class="row-fluid post-insights">
          <div class="span12">
            <div class="post-meta-data">
              <span class="post-create-time"></span>
              <span class="post-description"></span>
            </div>
          </div>
        </div>
        
        
        <!-- Posts insights container -->
        <div class="row-fluid post-insights">
          <div class="span6">
            <div class="post-image-container">
              <template></template>
              <template></template>
            </div>
          </div>
          <div class="span6">
            <div class="post-message">
              <template></template>
              <template></template>
            </div>
            <div class="insights-widget reach row-fluid">
              <span class="span6">
                  <strong class="reach-value"></strong> People Reached
              </span>
              <span class="span6">
                  Virality: <strong class="virality-value"></strong>%
              </span>
            </div>
              
            <div class="insights-widget row-fluid">
              <span class="span4">
                  <h3>Likes</h3>
                  <span class="value"><strong></strong></span>
              </span>
              <span class="span4">
                  <h3>Shares</h3>
                  <span class="value"><strong></strong></span>
              </span>
              <span class="span4">
                  <h3>Comments</h3>
                  <span class="value"><strong></strong></span>
              </span>
            </div>
            
            <div class="post-actions">
              <template></template>
              <template></template>
            </div>
          </div>
        </div>
        <div class="row-fluid post-insights">
        <div class="span12">
          <dl class="dl-horizontal">
            <dt>Talking about this:</dt>
            <dd></dd>
            <dt>Unique likes:</dt>
            <dd></dd>
            <dt>Unique shares:</dt>
            <dd></dd>
            <dt>Unique comments:</dt>
            <dd></dd>
          </dl>
        </div>
        </div>
        
       ''');
  autogenerated.DivElement __e85;
  autogenerated.Element __e100, __e102, __e104, __e106, __e108, __e109, __e111, __e113, __e115, __e117, __e90, __e92, __e93, __e96, __e98;
  autogenerated.SpanElement __e87, __e89;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("x-post-insights");
    setScopedCss("x-post-insights", new autogenerated.ScopedCssMapper({"x-post-insights":"[is=\"x-post-insights\"]"}));
    _css = getScopedCss("x-post-insights");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e85 = __root.nodes[3];
    __t.oneWayBind(() => ctrl, (e) { if (__e85.xtag.fbi != e) __e85.xtag.fbi = e; }, false, false);
    __t.oneWayBind(() => false, (e) { if (__e85.xtag.inlist != e) __e85.xtag.inlist = e; }, false, false);
    __t.component(new PostInteraction()..host = __e85);
    __e87 = __root.nodes[5].nodes[1].nodes[1].nodes[1];
    var __binding86 = __t.contentBind(() => created_time, false);
    __e87.nodes.add(__binding86);
    __e89 = __root.nodes[5].nodes[1].nodes[1].nodes[3];
    var __binding88 = __t.contentBind(() => postData['description'] == null ? '' : postData['description'], false);
    __e89.nodes.add(__binding88);
    __e90 = __root.nodes[9].nodes[1].nodes[1].nodes[1];
    __t.conditional(__e90, () => postPicture == null, (__t) {
    __t.addAll([new autogenerated.Text('\n                '),
        __html1.clone(true),
        new autogenerated.Text('\n              ')]);
    });

    __e92 = __root.nodes[9].nodes[1].nodes[1].nodes[3];
    __t.conditional(__e92, () => postPicture != null, (__t) {
      var __e91;
      __e91 = __html2.clone(true);
      __t.oneWayBind(() => postPicture['height'] == null ? 'auto' : postPicture['height'], (e) { if (__e91.dataset['height'] != e) __e91.dataset['height'] = e; }, false, false);
      __t.oneWayBind(() => postPicture['width'] == null ? 'auto' : postPicture['width'], (e) { if (__e91.dataset['width'] != e) __e91.dataset['width'] = e; }, false, false);
      __t.oneWayBind(() => postPicture['src'], (e) { if (__e91.src != e) __e91.src = e; }, false, true);
    __t.addAll([new autogenerated.Text('\n                '),
        __e91,
        new autogenerated.Text('\n              ')]);
    });

    __e93 = __root.nodes[9].nodes[3].nodes[1].nodes[1];
    __t.conditional(__e93, () => postData['message'] == null, (__t) {
    __t.addAll([new autogenerated.Text('\n                '),
        __html3.clone(true),
        new autogenerated.Text('\n              ')]);
    });

    __e96 = __root.nodes[9].nodes[3].nodes[1].nodes[3];
    __t.conditional(__e96, () => postData['message'] != null, (__t) {
      var __e95;
      __e95 = __html4.clone(true);
      var __binding94 = __t.contentBind(() => linkify(postData['message']), false);
      __e95.nodes.add(__binding94);
    __t.addAll([new autogenerated.Text('\n                '),
        __e95,
        new autogenerated.Text('\n              ')]);
    });

    __e98 = __root.nodes[9].nodes[3].nodes[3].nodes[1].nodes[1];
    var __binding97 = __t.contentBind(() => post_impressions_unique, false);
    __e98.nodes.add(__binding97);
    __e100 = __root.nodes[9].nodes[3].nodes[3].nodes[3].nodes[1];
    var __binding99 = __t.contentBind(() => virality, false);
    __e100.nodes.add(__binding99);
    __e102 = __root.nodes[9].nodes[3].nodes[5].nodes[1].nodes[3].nodes[0];
    var __binding101 = __t.contentBind(() => (post_stories_by_action_type == null || post_stories_by_action_type['like'] == null) ? 0 : post_stories_by_action_type['like'], false);
    __e102.nodes.add(__binding101);
    __e104 = __root.nodes[9].nodes[3].nodes[5].nodes[3].nodes[3].nodes[0];
    var __binding103 = __t.contentBind(() => (post_stories_by_action_type == null || post_stories_by_action_type['share'] == null) ? 0 : post_stories_by_action_type['share'], false);
    __e104.nodes.add(__binding103);
    __e106 = __root.nodes[9].nodes[3].nodes[5].nodes[5].nodes[3].nodes[0];
    var __binding105 = __t.contentBind(() => (post_stories_by_action_type == null || post_stories_by_action_type['comment'] == null) ? 0 : post_stories_by_action_type['comment'], false);
    __e106.nodes.add(__binding105);
    __e108 = __root.nodes[9].nodes[3].nodes[7].nodes[1];
    __t.conditional(__e108, () => ctrl.isGoogleConnected, (__t) {
      var __e107;
      __e107 = __html5.clone(true);
      __t.oneWayBind(() => postData['post_id'], (e) { if (__e107.dataset['postid'] != e) __e107.dataset['postid'] = e; }, false, false);
    __t.addAll([new autogenerated.Text('\n                '),
        __e107,
        new autogenerated.Text('\n              ')]);
    });

    __e109 = __root.nodes[9].nodes[3].nodes[7].nodes[3];
    __t.conditional(__e109, () => !ctrl.isGoogleConnected, (__t) {
    __t.addAll([new autogenerated.Text('\n                '),
        __html6.clone(true),
        new autogenerated.Text('\n              ')]);
    });

    __e111 = __root.nodes[11].nodes[1].nodes[1].nodes[3];
    var __binding110 = __t.contentBind(() => post_storytellers, false);
    __e111.nodes.add(__binding110);
    __e113 = __root.nodes[11].nodes[1].nodes[1].nodes[7];
    var __binding112 = __t.contentBind(() => (post_story_adds_by_action_type_unique == null || post_story_adds_by_action_type_unique['like'] == null) ? 0 : post_story_adds_by_action_type_unique['like'], false);
    __e113.nodes.add(__binding112);
    __e115 = __root.nodes[11].nodes[1].nodes[1].nodes[11];
    var __binding114 = __t.contentBind(() => (post_story_adds_by_action_type_unique == null || post_story_adds_by_action_type_unique['share'] == null) ? 0 : post_story_adds_by_action_type_unique['share'], false);
    __e115.nodes.add(__binding114);
    __e117 = __root.nodes[11].nodes[1].nodes[1].nodes[15];
    var __binding116 = __t.contentBind(() => (post_story_adds_by_action_type_unique == null || post_story_adds_by_action_type_unique['comment'] == null) ? 0 : post_story_adds_by_action_type_unique['comment'], false);
    __e117.nodes.add(__binding116);
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e85 = __e87 = __e89 = __e90 = __e92 = __e93 = __e96 = __e98 = __e100 = __e102 = __e104 = __e106 = __e108 = __e109 = __e111 = __e113 = __e115 = __e117 = null;
  }

  /** Original code from the component. */

  
  
  void created(){
    initializeDateFormatting(window.navigator.language, null).then((_){});
  }
  
  
  /// The controller
  var ctrl;
  /// [0] => [{}]
  /// [1] => [{post_id,created_time,message,type,permalink,description,attachment{media{href,alt,type,src}}}]
  get insights => ctrl.pagePostInsights;
  
  get postData => insights[1][0];
  var _postPicture;
  get postPicture {
    if(_postPicture != null){
      return _postPicture;
    }
    
    
    try{
      var img = insights[1][0]['attachment']['media'][0]['photo']['images'][1];
      _postPicture = {
        'src':img['src'],
        'width':img['width'].toString(),
        'height':img['height'].toString()
      };
    } catch(e){
      try{
        String img = insights[1][0]['attachment']['media'][0]['src'];
        if(img == null || img.isEmpty) return null;
        _postPicture = {
          'src':img,
          'width':null,
          'height':null
        };
      } catch(e){
        return null;
      }
    }
    return _postPicture;
  }
  
  get post_impressions_unique => (getMetricValue('post_impressions_unique') == null) ? 0 : getMetricValue('post_impressions_unique');
  get post_stories_by_action_type => getMetricValue('post_stories_by_action_type');
  get post_story_adds_by_action_type_unique => getMetricValue('post_story_adds_by_action_type_unique');
  get post_storytellers => (getMetricValue('post_storytellers') == null) ? 0 : getMetricValue('post_storytellers');
  
  double _virality;
  double get virality {
    if(_virality != null) return _virality;
    var storytellers = (post_storytellers == null) ? 0 : post_storytellers;
    var impressions_unique= (post_impressions_unique == null) ? 0 : post_impressions_unique;
    double res = storytellers/impressions_unique*100;
    int pow = Math.pow(10, 2);
    _virality = (res*pow).round() / pow;
    return _virality;
  }
  
  
  String _created_time;
  ///Get formatted time string
  String get created_time { 
    if(_created_time == null){
      DateFormat df = new DateFormat.yMMMMd(window.navigator.language).add_Hm();
      _created_time = df.format(new DateTime.fromMillisecondsSinceEpoch(postData['created_time']*1000));
    }
    return _created_time;
  }
  
  var _cache = {};
  getMetricValue(String insight_metric) {
    if(_cache[insight_metric] == null){
      var data = insights[0];
      var len = data.length;
      for(int i=0; i<len; i++){
        if(data[i]['metric'] == insight_metric){
          _cache[insight_metric] = data[i].value;
          break;
        }
      }
      if(_cache[insight_metric] == null){
        _cache[insight_metric] = false;
      }
    } else if(_cache[insight_metric] == false){
      return null;
    }
    return _cache[insight_metric];
  }
  
  SafeHtml linkify(String text) {
    List words = text.split(' ');
    
    var buffer = new StringBuffer();
    for (var word in words) {
      if (!buffer.isEmpty) buffer.write(' ');
      if (word.startsWith('http://') || word.startsWith('https://')) {
        buffer.write('<a target="_blank" href="$word">$word</a>');
      } else {
        buffer.write(word);
      }
    }
    SafeHtml sh = new SafeHtml.unsafe('<p>${buffer.toString()}</p>');
    return sh;
  }
}
//# sourceMappingURL=post_details.dart.map